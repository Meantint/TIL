장고란
  웹 프로그래밍 -> 홈페이지 만들기, 웹 서비스 만들기
  Frontend L 화면(웹 브라우저에서 동작하는 코드) => HTML, CSS, JS
  Backend  : 서버(데이터를 입출력하거나 계산하거나 하는 서버에서 동작하는 코드)
    => 컴퓨터에서 동작하는 언어(대표적인 것들로는 Python, Ruby, Java, PHP, JS, C#)

HTTP
  웹 사이트 동작 방식
    웹 브라우저 주소창에 URL 입력 후 엔터
 -> URL을 이용해서 서버의 IP를 찾는다
 -> IP를 이용해서 서버에 접속
 -> URL에 해당하는 자료를 요청
 -> 웹 어플리케이션이 URL을 해석해서 해당하는 코드가 동작
 -> 코드의 동작 결과를 응답으로 알려줌
 -> (서버 -> 웹 브라우저)로 데이터를 보내줌
 -> 웹 브라우저 응답받은 데이터를 화면에 표시
 -> 데이터를 받아온 다음에 *JS(AJAX)로 한 번 or 여러 번(주식 화면 같은 경우) 요청된다.

 벡엔드 처리량이 많다 : 각각의 URL 패턴마다 소스코드 1개 이상, 
 주소에 따라서 모두 동작을 하게 만들어줘야함.

Framework
  어떤 일을 할 때 자주 사용되는 기능을 미리 준비해둔 것.
  양질의 코드를 준비해놓은 것.
  코드의 양 때문에 등장 & 제품을 빨리 출시해야 하기 때문에 & 
  개선을 빨리해야 하기 때문에(수시로 바꾸기에 유리하다.)

  지금은 프레임워크 시대!

  Micro:	 최소한의 기능만 가지고 있다. 추가 가능을 원하는 대로 설치해서 사용한다. 
  커스터마이징 Good(Flask)
			 공부하기에는 Micro Framework가 더 좋다.

  FullStack: 거의 대부분의 기능을 가지고 있다. 추가 기능도 설치 가능하다. 커스터마이징 Bad(Django)

디자인 패턴 : 개발 설계상 발생하는 문제를 해결하기 위한 해결책. 디자이너 & 백엔드 & 프론트엔드를 
최대한 분리시키려고 한다.

  MVC:	전통적인 패턴. 가장 중립에 있음. Model & View & Controller의 약자. 대부분 MVC 패턴을 사용한다.
	Model      : 데이터베이스(DB 담당자)
	View       : 화면(Frontend)
	Controller : 계산, 처리(Backend)

  MTV:	Model & Template & View의 약자. MVC 패턴과 같으나 이름만 다르다. Django에서의 패턴 이름. 
	Model      : 데이터베이스(DB 담당자)
	Template   : 화면(Frontend)
	View 	   : 계산, 처리(Backend)

장고로 프로젝트 만드는 순서(가장 기본적인 틀)
  1.  프로젝트 만들기
  2.  장고 설치
  3.  장고 프로젝트 만들기
  4.  설정하기 (데이터베이스, S3(??))
  5.  데이터베이스 초기화
  6.  관리자 계정 만들기

(7 ~ 11)큰 프로젝트를 만들 때 계속 반복된다.
===============================================================================================
  7.  앱 만들기(네이버를 예로 들면 네이버 블로그 & 네이버 카페 등이 하나의 앱이라고 볼 수 있다.)
  8.  모델 설계

(9 ~ 11)여러번 반복되면서 화면을 만들어가기 시작한다.
대표적인 기능: 화면 CRUD(Create,   Read,         Update,       Delete) 
		   ex:			(회원가입, 회원정보조회, 회원정보수정, 회원탈퇴)
===============================================================================================
  9.  뷰 만들기(기능, 계산)
  10. 템플릿 만들기(화면에 표시될 내용)
  11. URL을 만든다.

미들웨어, 커스텀 템플릿 탭 등..의 고급 기능도 있다. 각각 별도로 인지하고 있으면 된다.
전체적인 틀은 위의 틀을 벗어나지 않는다.

뷰 : 기능을 담당(페이지 단위)
  화면이 나타나는 뷰, 화면이 없는 뷰
  화면이 있건 없건 주소 URL은 있어야 한다.

뷰 내용(함수, 클래스), URL이 있으면 동작한다.

뷰의 코드 형식 : 함수형, 클래스형
  함수형   : request를 매개변수로 받고(추가 매개변수 가능), 모양은 함수, 내가 원하는대로 
  동작들을 설계하고 만들고 싶을 때 사용
  클래스형 : CRUD 같이 기존에 많이 사용하는 기능을 미리 클래스로 만들어두고 상속받아서 사용한다.

  Django의 Generic View : 미리 만들어 놓은 뷰